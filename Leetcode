2. Add Two Numbers
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

def add_two_numbers(l1, l2)
    equation = l1.map(&:to_s).reverse.join.to_i + l2.map(&:to_s).reverse.join.to_i
    equation.to_s.reverse.split(//).map(&:to_i)
end
add_two_numbers([2,4,3],[5,6,4])


6. ZigZag Conversion
The string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
Example 2:

Input: s = "PAYPALISHIRING", numRows = 4
Output: "PINALSIGYAHRPI"
Explanation:

P     I    N
A   L S  I G
Y A   H R
P     I

def convert(s, num_rows)
    return s if s.length <= num_rows || num_rows == 1
    array = []
    increment = true
    row = 0
    s.each_char do |x|
        increment = true if row == 0
        increment = false if row == num_rows - 1
        array[row] ? array[row] += x : array[row] = x
        increment ? row += 1 : row -= 1
    end
    array.join
end


