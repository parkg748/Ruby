-----First Reverse-----
Using the Ruby language, have the function FirstReverse(str) take the str parameter being passed and return the string in 
reversed order. For example: if the input string is "Hello World and Coders" then your program should return the string 
sredoC dna dlroW olleH. 

def FirstReverse(str)
    str.reverse
end

-----First Factorial-----
Using the Ruby language, have the function FirstFactorial(num) take the num parameter being passed and return the factorial of 
it (e.g. if num = 4, return (4 * 3 * 2 * 1)). For the test cases, the range will be between 1 and 18 and the input will always 
be an integer. 

def FirstFactorial(num)
    (1..num).inject(:*)
end

-----Longest Word-----
Using the Ruby language, have the function LongestWord(sen) take the sen parameter being passed and return the largest word in 
the string. If there are two or more words that are the same length, return the first word from the string with that length. 
Ignore punctuation and assume sen will not be empty. 

def LongestWord(sen)
    array = sen.split(' ')
    max_length = 0
    best_word = ''
    array.each do |x|
        if x.scan(/\w+/)[0].length > max_length
            max_length = x.scan(/\w+/)[0].length
            best_word = x.scan(/\w+/)[0]
        end
    end
    best_word
end

-----Letter Changes-----
Using the Ruby language, have the function LetterChanges(str) take the str parameter being passed and modify it using the 
following algorithm. Replace every letter in the string with the letter following it in the alphabet (ie. c becomes d, z 
becomes a). Then capitalize every vowel in this new string (a, e, i, o, u) and finally return this modified string. 

def LetterChanges(str)
    array = str.split(//)
    array.each_with_index do |x, i|
        if x == 'z'
            array[i] = 'A'
        elsif x =~ /[a-y]/ && (x.ord + 1).chr =~ /[aeiou]/
            array[i] = (x.ord + 1).chr.upcase
        elsif x =~ /[a-y]/
            array[i] = (x.ord + 1).chr
        end
    end
    array.join
end

-----Simple Adding-----
Using the Ruby language, have the function SimpleAdding(num) add up all the numbers from 1 to num. For example: if the input is 
4 then your program should return 10 because 1 + 2 + 3 + 4 = 10. For the test cases, the parameter num will be any number from 
1 to 1000. 

def SimpleAdding(num)
    (1..num).inject(:+)
end

-----Letter Capitalize-----
Using the Ruby language, have the function LetterCapitalize(str) take the str parameter being passed and capitalize the first 
letter of each word. Words will be separated by only one space. 

def LetterCapitalize(str)
    array = str.split(' ')
    array.map! { |x| x.capitalize }
    array.join(' ')
end

-----Simple Symbols-----
Using the Ruby language, have the function SimpleSymbols(str) take the str parameter being passed and determine if it is an 
acceptable sequence by either returning the string true or false. The str parameter will be composed of + and = symbols with 
several letters between them (ie. ++d+===+c++==a) and for the string to be true each letter must be surrounded by a + symbol. 
So the string to the left would be false. The string will not be empty and will have at least one letter. 

def SimpleSymbols(str)
    return false if str.length < 3
    i = 0
    until i == str.length - 1
        if i == 0 && str[i] =~ /[a-zA-Z]/ || str[str.length - 1] =~ /[a-zA-Z]/
            return false
        elsif str[i] =~ /[a-zA-Z]/ && (str[i - 1] != '+' || str[i + 1] != '+')
            return false
        end
        i += 1
    end
    true
end

-----Check Nums-----
Using the Ruby language, have the function CheckNums(num1,num2) take both parameters being passed and return the string true 
if num2 is greater than num1, otherwise return the string false. If the parameter values are equal to each other then return 
the string -1. 

def CheckNums(num1,num2)
    if num2 > num1
        return true
    elsif num1 > num2
        return false
    end
    -1
end

-----Time Convert-----
Using the Ruby language, have the function TimeConvert(num) take the num parameter being passed and return the number of hours 
and minutes the parameter converts to (ie. if num = 63 then the output should be 1:3). Separate the number of hours and 
minutes with a colon. 

def TimeConvert(num)
    hour = 0
    min = 0
    until num == 0
        if num >= 60
            hour += 1
            num -= 60
        else
            min = num
            num = 0
        end
    end
    hour.to_s + ':' + min.to_s
end

-----Alphabet Soup-----
Using the Ruby language, have the function AlphabetSoup(str) take the str string parameter being passed and return the string 
with the letters in alphabetical order (ie. hello becomes ehllo). Assume numbers and punctuation symbols will not be included 
in the string. 

def AlphabetSoup(str)
    str.split(//).sort.join
end

-----AB Check-----
Using the Ruby language, have the function ABCheck(str) take the str parameter being passed and return the string true if the 
characters a and b are separated by exactly 3 places anywhere in the string at least once (ie. "lane borrowed" would result in 
true because there is exactly three characters between a and b). Otherwise return the string false. 

def ABCheck(str)
    str.each_char.with_index { |x, i| return true if (x == 'b' && str[i + 4] == 'a') || (x == 'a' && str[i + 4] == 'b') }
    false
end

-----Vowel Count-----
Using the Ruby language, have the function VowelCount(str) take the str string parameter being passed and return the number of 
vowels the string contains (ie. "All cows eat grass and moo" would return 8). Do not count y as a vowel for this challenge.

def VowelCount(str)
    count = 0
    str.each_char { |x| count += 1 if x =~ /[aeiouAEIOU]/ }
    count
end

-----Word Count-----
Using the Ruby language, have the function WordCount(str) take the str string parameter being passed and return the number of 
words the string contains (e.g. "Never eat shredded wheat or cake" would return 6). Words will be separated by single spaces. 

def WordCount(str)
    str.split(' ').length
end

-----Ex Oh-----
Using the Ruby language, have the function ExOh(str) take the str parameter being passed and return the string true if there 
is an equal number of x's and o's, otherwise return the string false. Only these two letters will be entered in the string, 
no punctuation or numbers. For example: if str is "xooxxxxooxo" then the output should return false because there are 6 x's 
and 5 o's. 

def ExOh(str)
    if str.count('x') == str.count('o')
        return true
    else
        return false
    end
end

-----Palindrome-----
Using the Ruby language, have the function Palindrome(str) take the str parameter being passed and return the string true if 
the parameter is a palindrome, (the string is the same forward as it is backward) otherwise return the string false. For 
example: "racecar" is also "racecar" backwards. Punctuation and numbers will not be part of the string. 

def Palindrome(str)
    if str.split(' ').join == str.split(' ').join.reverse
        return true
    else
        return false
    end
end

-----Arith Geo-----
Using the Ruby language, have the function ArithGeo(arr) take the array of numbers stored in arr and return the string 
"Arithmetic" if the sequence follows an arithmetic pattern or return "Geometric" if it follows a geometric pattern. If the 
sequence doesn't follow either pattern return -1. An arithmetic sequence is one where the difference between each of the 
numbers is consistent, where as in a geometric sequence, each term after the first is multiplied by some constant or common 
ratio. Arithmetic example: [2, 4, 6, 8] and Geometric example: [2, 6, 18, 54]. Negative numbers may be entered as parameters, 
0 will not be entered, and no array will contain all the same elements. 

def ArithGeo(arr)
    difference = arr[1] - arr[0]
    multiply = arr[1] / arr[0]
    status = nil
    i = 0
    until i == arr.length - 1
        if arr[i] + difference == arr[i + 1]
            status = 'Arithmetic'
        else
            status = nil
            break
        end
        i += 1
    end
    if status == nil
        i = 0
        until i == arr.length - 1
            if arr[i] * multiply == arr[i + 1]
                status = 'Geometric'
            else
                status = nil
                break
            end
            i += 1
        end
    end
    status == nil ? -1 : status
end

-----Array Addition I-----
Using the Ruby language, have the function ArrayAdditionI(arr) take the array of numbers stored in arr and return the string 
true if any combination of numbers in the array (excluding the largest number) can be added up to equal the largest number in 
the array, otherwise return the string false. For example: if arr contains [4, 6, 23, 10, 1, 3] the output should return true 
because 4 + 6 + 10 + 3 = 23. The array will not be empty, will not contain all the same elements, and may contain negative 
numbers. 

def ArrayAdditionI(arr)
    max_num = arr.max
    arr.delete(max_num)
    (arr.length).downto(2) do |x|
        arr.combination(x).each { |y| return true if y.inject(:+) == max_num }
    end
    false
end

-----Second Greatest Low-----
Using the Ruby language, have the function SecondGreatLow(arr) take the array of numbers stored in arr and return the second 
lowest and second greatest numbers, respectively, separated by a space. For example: if arr contains [7, 7, 12, 98, 106] the 
output should be 12 98. The array will not be empty and will contain at least 2 numbers. It can get tricky if there's just two 
numbers! 

def SecondGreatLow(arr)
    arr = arr.sort.uniq
    return arr[0].to_s + ' ' + arr[0].to_s if arr.length == 2
    return arr[1].to_s + ' ' + arr[0].to_s if arr.length == 2
    arr[1].to_s + ' ' + arr[-2].to_s
end

-----Division Stringified-----
Using the Ruby language, have the function DivisionStringified(num1,num2) take both parameters being passed, divide num1 by 
num2, and return the result as a string with properly formatted commas. If an answer is only 3 digits long, return the number 
with no commas (ie. 2 / 3 should output "1"). For example: if num1 is 123456789 and num2 is 10000 the output should be 
"12,346". 

def DivisionStringified(num1,num2)
    require 'enumerator'
    equation = (num1.to_f / num2.to_f).round
    if equation.to_s.length > 3
        array = equation.to_s.split(//).reverse
        array = array.enum_for(:each_slice, 3).to_a
        array.map! { |x| x.join }
        return array.join(',').reverse
    end
    equation.to_s
end

-----Counting Minutes I-----
Using the Ruby language, have the function CountingMinutesI(str) take the str parameter being passed which will be two times 
(each properly formatted with a colon and am or pm) separated by a hyphen and return the total number of minutes between the 
two times. The time will be in a 12 hour clock format. For example: if str is 9:00am-10:00am then the output should be 60. If 
str is 1:00pm-11:00am the output should be 1320. 

def CountingMinutesI(str)
    array = str.split('-')
    array.map!.with_index { |x, i| array[i].split(':') }
    array.flatten!
    array[1].include?('pm') && array[0].to_i < 12 ? first_clock = (array[0].to_i + 12) * 60 + array[1][0..1].to_i : first_clock = array[0].to_i * 60 + array[1][0..1].to_i
    array[3].include?('pm') && array[2].to_i < 12 ? second_clock = (array[2].to_i + 12) * 60 + array[3][0..1].to_i : second_clock = array[2].to_i * 60 + array[3][0..1].to_i
    first_clock = array[1][0..1].to_i if array[1].include?('am') && array[0].to_i == 12
    second_clock = array[3][0..1].to_i if array[3].include?('am') && array[2].to_i == 12
    second_clock - first_clock < 0 ? (second_clock - first_clock) + 24 * 60 : second_clock - first_clock
end

-----Mean Mode-----
Using the Ruby language, have the function MeanMode(arr) take the array of numbers stored in arr and return 1 if the mode 
equals the mean, 0 if they don't equal each other (ie. [5, 3, 3, 3, 1] should return 1 because the mode (3) equals the mean 
(3)). The array will not be empty, will only contain positive integers, and will not contain more than one mode. 

def MeanMode(arr)
    max_count = 0
    mode = 0
    arr.each do |x|
        if arr.count(x) > max_count
            max_count = arr.count(x)
            mode = x
        end
    end
    arr.inject(:+) / arr.length == mode ? 1 : 0
end

-----Dash Insert-----
Using the Ruby language, have the function DashInsert(str) insert dashes ('-') between each two odd numbers in str. For 
example: if str is 454793 the output should be 4547-9-3. Don't count zero as an odd number. 

def DashInsert(str)
    i = 0
    until i == str.length - 1
        if str[i].to_i.odd? && str[i + 1].to_i.odd?
            str.insert(i + 1, '-')
            i += 1
        end
        i += 1
    end
    str
end

-----Swap Case-----
Using the Ruby language, have the function SwapCase(str) take the str parameter and swap the case of each character. For 
example: if str is "Hello World" the output should be hELLO wORLD. Let numbers and symbols stay the way they are. 

def SwapCase(str)
    str.swapcase
end

-----Number Addition-----
Using the Ruby language, have the function NumberSearch(str) take the str parameter, search for all the numbers in the string, 
add them together, then return that final number. For example: if str is "88Hello 3World!" the output should be 91. You will 
have to differentiate between single digit numbers and multiple digit numbers like in the example above. So "55Hello" and 
"5Hello 5" should return two different answers. Each string will contain at least one letter or symbol. 

def NumberAddition(str)
    return 0 if !(str =~ /[0-9]/)
    str.scan(/\d+/).map(&:to_i).inject(:+)
end

-----Third Greatest-----
Using the Ruby language, have the function ThirdGreatest(strArr) take the array of strings stored in strArr and return the 
third largest word within in. So for example: if strArr is ["hello", "world", "before", "all"] your output should be world 
because "before" is 6 letters long, and "hello" and "world" are both 5, but the output should be world because it appeared as 
the last 5 letter word in the array. If strArr was ["hello", "world", "after", "all"] the output should be after because the 
first three words are all 5 letters long, so return the last one. The array will have at least three strings and each string 
will only contain letters. 

def ThirdGreatest(strArr)
    strArr = strArr.sort_by { |x| [x.length, -strArr.index(x)] }
    strArr[-3]
end

-----Powers of Two-----
Using the Ruby language, have the function PowersofTwo(num) take the num parameter being passed which will be an integer and 
return the string true if it's a power of two. If it's not return the string false. For example if the input is 16 then your 
program should return the string true but if the input is 22 then the output should be the string false. 

def PowersofTwo(num)
    1.upto(num).each { |x| return true if 2 ** x == num }
    false
end

-----Additive Persistance-----
Using the Ruby language, have the function AdditivePersistence(num) take the num parameter being passed which will always be a 
positive integer and return its additive persistence which is the number of times you must add the digits in num until you 
reach a single digit. For example: if num is 2718 then your program should return 2 because 2 + 7 + 1 + 8 = 18 and 1 + 8 = 9 
and you stop at 9. 

def AdditivePersistence(num)
    return 0 if num.to_s.length == 1
    array = num.to_s.split(//).map(&:to_i)
    count = 0
    until array.length == 1
        array = array.inject(:+).to_s.split(//).map(&:to_i)
        count += 1
    end
    count
end

-----Multiplicative Persistance-----
Using the Ruby language, have the function MultiplicativePersistence(num) take the num parameter being passed which will 
always be a positive integer and return its multiplicative persistence which is the number of times you must multiply the 
digits in num until you reach a single digit. For example: if num is 39 then your program should return 3 because 3 * 9 = 27 
then 2 * 7 = 14 and finally 1 * 4 = 4 and you stop at 4. 

def MultiplicativePersistence(num)
    return 0 if num.to_s.length == 1
    array = num.to_s.split(//).map(&:to_i)
    count = 0
    until array.length == 1
        array = array.inject(:*).to_s.split(//).map(&:to_i)
        count += 1
    end
    count
end

-----Off Line Minimum-----
Using the Ruby language, have the function OffLineMinimum(strArr) take the strArr parameter being passed which will be an 
array of integers ranging from 1...n and the letter "E" and return the correct subset based on the following rules. The input 
will be in the following format: ["I","I","E","I",...,"E",...,"I"] where the I's stand for integers and the E means take out 
the smallest integer currently in the whole set. When finished, your program should return that new set with integers separated 
by commas. For example: if strArr is ["5","4","6","E","1","7","E","E","3","2"] then your program should return 4,1,5. 

def OffLineMinimum(strArr)
    array = []
    final_array = []
    strArr.each do |x|
        if x =~ /[0-9]/
            array << x.to_i
        elsif x == 'E'
            final_array << array.min
            array.delete(array.min)
        end
    end
    final_array.map(&:to_s).join(',')
end

-----Changing Sequence-----
Using the Ruby language, have the function ChangingSequence(arr) take the array of numbers stored in arr and return the index 
at which the numbers stop increasing and begin decreasing or stop decreasing and begin increasing. For example: if arr is [1, 
2, 4, 6, 4, 3, 1] then your program should return 3 because 6 is the last point in the array where the numbers were increasing 
and the next number begins a decreasing sequence. The array will contain at least 3 numbers and it may contains only a single 
sequence, increasing or decreasing. If there is only a single sequence in the array, then your program should return -1. 
Indexing should begin with 0. 

def ChangingSequence(arr)
    return -1 if arr == arr.sort || arr == arr.sort.reverse
    i = 0
    until i == arr.length - 1
        return i if i != 0 && ((arr[i - 1] < arr[i] && arr[i] > arr[i + 1]) || (arr[i - 1] > arr[i] && arr[i] < arr[i + 1]))
        i += 1
    end
end

-----Overlapping Ranges-----
Using the Ruby language, have the function OverlappingRanges(arr) take the array of numbers stored in arr which will contain 
5 positive integers, the first two representing a range of numbers (a to b), the next 2 also representing another range of 
integers (c to d), and a final 5th element (x) which will also be a positive integer, and return the string true if both sets 
of ranges overlap by at least x numbers. For example: if arr is [4, 10, 2, 6, 3] then your program should return the string 
true. The first range of numbers are 4, 5, 6, 7, 8, 9, 10 and the second range of numbers are 2, 3, 4, 5, 6. The last element 
in the array is 3, and there are 3 numbers that overlap between both ranges: 4, 5, and 6. If both ranges do not overlap by at 
least x numbers, then your program should return the string false. 

def OverlappingRanges(arr)
    first_array = [*arr[0]..arr[1]]
    second_array = [*arr[2]..arr[3]]
    count = 0
    first_array.each { |x| count += 1 if second_array.include?(x) }
    count >= arr.last ? true : false
end

-----Superincreasing-----
Using the Ruby language, have the function Superincreasing(arr) take the array of numbers stored in arr and determine if the 
array forms a superincreasing sequence where each element in the array is greater than the sum of all previous elements. The 
array will only consist of positive integers. For example: if arr is [1, 3, 6, 13, 54] then your program should return the 
string "true" because it forms a superincreasing sequence. If a superincreasing sequence isn't formed, then your program should 
return the string "false"

def Superincreasing(arr)
    arr.each_with_index { |x, i| return false if i != 0 && arr[0...i].inject(:+) >= x }
    true
end

-----Hamming Distance-----
Using the Ruby language, have the function HammingDistance(strArr) take the array of strings stored in strArr, which will only 
contain two strings of equal length and return the Hamming distance between them. The Hamming distance is the number of 
positions where the corresponding characters are different. For example: if strArr is ["coder", "codec"] then your program 
should return 1. The string will always be of equal length and will only contain lowercase characters from the alphabet and 
numbers. 

def HammingDistance(strArr)
    count = 0
    strArr[0].each_char.with_index { |x, i| count += 1 if x != strArr[1][i] }
    count
end

-----Rectangle Area-----
Using the Ruby language, have the function RectangleArea(strArr) take the array of strings stored in strArr, which will only 
contain 4 elements and be in the form (x y) where x and y are both integers, and return the area of the rectangle formed by 
the 4 points on a Cartesian grid. The 4 elements will be in arbitrary order. For example: if strArr is ["(0 0)", "(3 0)", 
"(0 2)", "(3 2)"] then your program should return 6 because the width of the rectangle is 3 and the height is 2 and the area 
of a rectangle is equal to the width * height. 

def RectangleArea(strArr)
    strArr.map! { |x| x.scan(/\d+/).map(&:to_i) }.sort!
    width = (strArr[2][0] - strArr[0][0]).abs
    height = (strArr[1][1] - strArr[0][1]).abs
    width * height
end

-----
